// <auto-generated />
using System;
using LocalGym.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LocalGym.Migrations
{
    [DbContext(typeof(GymInfoContext))]
    [Migration("20240731070148_gymInitialSeed")]
    partial class gymInitialSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LocalGym.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("JoinDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice.johnson@example.com",
                            FirstName = "Alice",
                            JoinDate = new DateOnly(2023, 1, 15),
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 2,
                            Email = "bob.smith@example.com",
                            FirstName = "Bob",
                            JoinDate = new DateOnly(2023, 2, 22),
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 3,
                            Email = "carol.davis@example.com",
                            FirstName = "Carol",
                            JoinDate = new DateOnly(2023, 3, 10),
                            LastName = "Davis"
                        },
                        new
                        {
                            Id = 4,
                            Email = "dave.wilson@example.com",
                            FirstName = "Dave",
                            JoinDate = new DateOnly(2023, 4, 5),
                            LastName = "Wilson"
                        },
                        new
                        {
                            Id = 5,
                            Email = "eve.brown@example.com",
                            FirstName = "Eve",
                            JoinDate = new DateOnly(2023, 5, 20),
                            LastName = "Brown"
                        });
                });

            modelBuilder.Entity("LocalGym.Entities.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time");

                    b.Property<DateOnly>("SessionDate")
                        .HasColumnType("date");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            SessionId = 1,
                            CustomerId = 1,
                            Duration = new TimeOnly(0, 0, 0).Add(TimeSpan.FromTicks(45)),
                            SessionDate = new DateOnly(2024, 7, 15),
                            TrainerId = 2
                        },
                        new
                        {
                            SessionId = 2,
                            CustomerId = 2,
                            Duration = new TimeOnly(0, 0, 0).Add(TimeSpan.FromTicks(60)),
                            SessionDate = new DateOnly(2024, 7, 16),
                            TrainerId = 3
                        },
                        new
                        {
                            SessionId = 3,
                            CustomerId = 3,
                            Duration = new TimeOnly(0, 0, 0).Add(TimeSpan.FromTicks(30)),
                            SessionDate = new DateOnly(2024, 7, 17),
                            TrainerId = 1
                        },
                        new
                        {
                            SessionId = 4,
                            CustomerId = 4,
                            Duration = new TimeOnly(0, 0, 0).Add(TimeSpan.FromTicks(50)),
                            SessionDate = new DateOnly(2024, 7, 18),
                            TrainerId = 4
                        },
                        new
                        {
                            SessionId = 5,
                            CustomerId = 5,
                            Duration = new TimeOnly(0, 0, 0).Add(TimeSpan.FromTicks(40)),
                            SessionDate = new DateOnly(2024, 7, 19),
                            TrainerId = 5
                        });
                });

            modelBuilder.Entity("LocalGym.Entities.Trainer", b =>
                {
                    b.Property<int>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainerId"));

                    b.Property<double>("FeePer30Minutes")
                        .HasColumnType("float");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainerId");

                    b.ToTable("Trainers");

                    b.HasData(
                        new
                        {
                            TrainerId = 1,
                            FeePer30Minutes = 30.0,
                            FirstName = "John",
                            HireDate = new DateOnly(2022, 11, 1),
                            LastName = "Carter",
                            Speciality = "Strength Training"
                        },
                        new
                        {
                            TrainerId = 2,
                            FeePer30Minutes = 25.0,
                            FirstName = "Emma",
                            HireDate = new DateOnly(2023, 1, 15),
                            LastName = "Green",
                            Speciality = "Yoga"
                        },
                        new
                        {
                            TrainerId = 3,
                            FeePer30Minutes = 35.0,
                            FirstName = "Michael",
                            HireDate = new DateOnly(2023, 3, 10),
                            LastName = "Lee",
                            Speciality = "Cardio"
                        },
                        new
                        {
                            TrainerId = 4,
                            FeePer30Minutes = 28.0,
                            FirstName = "Sarah",
                            HireDate = new DateOnly(2023, 4, 20),
                            LastName = "Martinez",
                            Speciality = "Pilates"
                        },
                        new
                        {
                            TrainerId = 5,
                            FeePer30Minutes = 32.0,
                            FirstName = "Chris",
                            HireDate = new DateOnly(2023, 6, 1),
                            LastName = "Clark",
                            Speciality = "Weightlifting"
                        });
                });

            modelBuilder.Entity("LocalGym.Entities.Session", b =>
                {
                    b.HasOne("LocalGym.Entities.Member", "member")
                        .WithMany("Sessions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalGym.Entities.Trainer", "Trainer")
                        .WithMany("Sessions")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");

                    b.Navigation("member");
                });

            modelBuilder.Entity("LocalGym.Entities.Member", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("LocalGym.Entities.Trainer", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
